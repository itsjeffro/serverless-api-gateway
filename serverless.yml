service: api-gateway

plugins:
  - serverless-dotenv-plugin
  - serverless-domain-manager

provider:
  name: aws
  region: ap-southeast-2
  stage: ${opt:stage, 'dev'}
  apiGateway:
    description: Reusable API gateway and authorizer
  environment:
    JWT_SIGNING_KEY: ${env:JWT_SIGNING_KEY}
  
custom:
  apiGatewayName: ApiGateway-${self:provider.stage}
  apiGatewayaAuthorizerName: ClientAuthorizer-${self:provider.stage}
  domain:
    stages:
      dev:
        name: api-dev.itsjeffro.com
        basePath: ''
        certificateName: '*.itsjeffro.com'
      prod:
        name: api.itsjeffro.com
        basePath: ''
        certificateName: '*.itsjeffro.com'
  customDomain:
    domainName: ${self:custom.domain.stages.${self:provider.stage}.name}
    basePath: ${self:custom.domain.stages.${self:provider.stage}.basePath}
    certificateName: ${self:custom.domain.stages.${self:provider.stage}.certificateName}
    stage: ${self:provider.stage}
    endpointType: 'regional'
    createRoute53Record: true

package:
  individually: false
  excludeDevDependencies: true
  include:
    - dist/**
    - config/**
  exclude:
    - ./**
    - '!node_modules/**'
    - 'node_modules/aws-sdk/**'
    - 'node_modules/serverless-domain-manager/**'
    - 'node_modules/serverless-dotenv-plugin/**'

functions:
  clientAuthorizer:
    handler: dist/handlers/authorizer.auth
    cors: true

  versionOne:
    handler: dist/handlers/version.versionOne
    events:
      - http:
          path: v1
          method: get
          cors: true

resources:
  Resources:

    ApiGatewayAuthorizer:
      ${file(serverless/resources/authorizer.yml):ApiGatewayAuthorizer}

    ApiGatewayAuthorizerPermission:
      ${file(serverless/resources/authorizer.yml):ApiGatewayAuthorizerPermission}

    InternalTenantsTable:
      ${file(serverless/resources/dynamodb.yml):InternalTenantsTable}
            
    InternalServiceDocsTable:
      ${file(serverless/resources/dynamodb.yml):InternalServiceDocsTable}
            
    InternalServicePoliciesTable:
      ${file(serverless/resources/dynamodb.yml):InternalServicePoliciesTable}
            
  Outputs:

    # API gateway outputs
    apiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi 
      Export:
        Name: ${self:custom.apiGatewayName}-restApiId 
       
    apiGatewayRestApiRootResourceId: 
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi 
          - RootResourceId 
      Export:
        Name: ${self:custom.apiGatewayName}-rootResourceId

    # API gateway resources
    # - The ref is a combination of "ApiGatewayResource" and "path" with the first letter being capital.
    # - For example, ApiGatewayResource{NormalizedPath - v1} for the authorizer would be "ApiGatewayResourceV1"
    apiGatewayRestApiVersionOneResourceId:
      Value:
        Ref: ApiGatewayResourceV1
      Export:
        Name: ${self:custom.apiGatewayName}-versionOneResourceId

    # API gateway authorizer outputs
    apiGatewayRestApiAuthorizer:
      Value:
        Ref: ApiGatewayAuthorizer
      Export:
        Name: ${self:custom.apiGatewayName}-authorizer