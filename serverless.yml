service: api-gateway

provider:
  name: aws
  region: ap-southeast-2
  stage: ${opt:stage, 'dev'}
  
custom:
  apiGatewayName: ApiGateway-${self:provider.stage}
  authorizerName: ClientAuthorizer-${self:provider.stage}
  
functions:
  clientAuthorizer
    handler: handler.clientAuthorizer

resources:
  Resources: 
    ApiGateway:
      Type: AWS::ApiGateway::RestApi
      Properties: 
        Name: ${self:custom.apiGatewayName}
        Tags:
          -
            Key: Environment
            Value: ${self:provider.stage}
    
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: ${self:custom.authorizerName}
        AuthorizerUri: 
          Ref: clientAuthorizerLambdaFunction
        AuthorizerCredentials: !GetAtt
          - LambdaInvocationRole
          - Arn
        RestApiId:
          Ref: ApiGateway
        Type: TOKEN
        IdentitySource: method.request.header.Authorization
            
  Outputs:
    apiGatewayRestApiId:
      Value:
        Ref: ApiGateway 
      Export: 
        Name: ${self:custom.apiGatewayName}-restApiId 
       
    apiGatewayRestApiRootResourceId: 
      Value:
        Fn::GetAtt: 
          - ApiGateway 
          - RootResourceId 
      Export:
        Name: ${self:custom.apiGatewayName}-rootResourceId