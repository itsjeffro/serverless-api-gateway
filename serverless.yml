service: api-gateway

plugins:
  - serverless-dotenv-plugin
  - serverless-domain-manager

provider:
  name: aws
  region: ap-southeast-2
  stage: ${opt:stage, 'dev'}
  apiGateway:
    description: Reusable API gateway and authorizer
  environment:
    STAGE: ${self:provider.stage}
  
custom:
  apiGatewayName: ApiGateway-${self:provider.stage}
  apiGatewayaAuthorizerName: ClientAuthorizer-${self:provider.stage}
  domain:
    stages:
      dev:
        name: api-dev.itsjeffro.com
        basePath: ''
        certificateName: '*.itsjeffro.com'
      prod:
        name: api.itsjeffro.com
        basePath: ''
        certificateName: '*.itsjeffro.com'
  customDomain:
    domainName: ${self:custom.domain.stages.${self:provider.stage}.name}
    basePath: ${self:custom.domain.stages.${self:provider.stage}.basePath}
    certificateName: ${self:custom.domain.stages.${self:provider.stage}.certificateName}
    stage: ${self:provider.stage}
    endpointType: 'regional'
    createRoute53Record: true

package:
  individually: false
  excludeDevDependencies: true
  include:
    - dist/**
    - config/**
  exclude:
    - ./**
    - '!node_modules/**'
    - 'node_modules/aws-sdk/**'
    - 'node_modules/serverless-domain-manager/**'
    - 'node_modules/serverless-dotenv-plugin/**'

functions:
  clientAuthorizer:
    handler: dist/handlers/authorizer.auth
    cors: true
    environment:
      JWT_SIGNING_KEY: ${env:JWT_SIGNING_KEY}

  versionOne:
    handler: dist/handlers/version.versionOne
    events:
      - http:
          path: v1
          method: get
          cors: true

resources:
  Resources:
    # Authorizer (jwt)
    ApiGatewayAuthorizer:
      ${file(serverless/resources/authorizer/jwt-authorizer.yml):resource.ApiGatewayAuthorizer}

    ApiGatewayAuthorizerPermission:
      ${file(serverless/resources/authorizer/jwt-authorizer.yml):resource.ApiGatewayAuthorizerPermission}

    # DynamoDB tables
    InternalTenantsTable:
      ${file(serverless/resources/dynamodb/tenants.yml):resource.InternalTenantsTable}

    InternalServiceDocsTable:      
      ${file(serverless/resources/dynamodb/service-docs.yml):resource.InternalServiceDocsTable}
          
    InternalServicePoliciesTable:
      ${file(serverless/resources/dynamodb/service-policies.yml):resource.InternalServicePoliciesTable}
            
  Outputs:
    # API gateway
    apiGatewayRestApiId:
      ${file(serverless/resources/apigateway/apigateway.yml):output.apiGatewayRestApiId}
       
    apiGatewayRestApiRootResourceId: 
      ${file(serverless/resources/apigateway/apigateway.yml):output.apiGatewayRestApiRootResourceId}

    # API gateway resources (versions)
    apiGatewayRestApiVersionOneResourceId:
      ${file(serverless/resources/apigateway/apigateway.yml):output.apiGatewayRestApiVersionOneResourceId}

    # API gateway authorizer
    apiGatewayRestApiAuthorizer:
      ${file(serverless/resources/authorizer/jwt-authorizer.yml):output.apiGatewayRestApiAuthorizer}